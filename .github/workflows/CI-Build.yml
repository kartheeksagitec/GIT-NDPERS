name: CI - Build & Publish All Projects

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build & Publish All Projects
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Build solution (Rebuild, Release) and produce logs
      shell: pwsh
      run: |
        $sln = "slnNeoSpin/slnNeoSpin.sln"
        msbuild $sln /t:Rebuild /p:Configuration=Release /m `
          /fl `
          "/flp:logfile=msbuild.log;verbosity=diagnostic" `
          /bl:msbuild.binlog > build_output.txt 2>&1

    - name: Prepare staging folder
      shell: pwsh
      run: |
        $staging = "${{ runner.temp }}\Build_All_Staging"
        if (Test-Path $staging) { Remove-Item $staging -Recurse -Force }
        New-Item -ItemType Directory -Path $staging | Out-Null
        Write-Host "Staging prepared at: $staging"

    - name: Collect project outputs into staging (all platforms/configs)
      shell: pwsh
      run: |
        $repoRoot = "${{ github.workspace }}"

        # List of project relative folders (as you provided)
        $projects = @(
          "slnNeoSpin/NeoSpinBatch",
          "slnNeoSpin/NeoSpinBPMEngine",
          "slnNeoSpin/NeoSpinBusinessObjects",
          "slnNeoSpin/NeoSpinBusinessTier",
          "slnNeoSpin/NeoSpinCommon",
          "slnNeoSpin/NeoSpinESS",
          "slnNeoSpin/NeoSpinMSS",
          "slnNeoSpin/NeoSpinInterface",
          "slnNeoSpin/NeospinWebClientMVVM"
        )

        $staging = "${{ runner.temp }}\Build_All_Staging"

        foreach ($proj in $projects) {
          $projPath = Join-Path $repoRoot $proj
          if (-not (Test-Path $projPath)) {
            Write-Host " Project folder not found: $projPath (skipping)"
            continue
          }

          # Find any 'bin' folders under the project (any configuration/platform)
          $binFolders = Get-ChildItem -Path $projPath -Recurse -Directory -Force |
                        Where-Object { $_.FullName -match "\\bin($|\\)" }

          if ($binFolders.Count -eq 0) {
            Write-Host " No bin folders found under $projPath (skipping)"
            continue
          }

          # copy every file from each bin folder into staging/<ProjectName> preserving structure
          $target = Join-Path $staging (Split-Path $proj -Leaf)
          New-Item -ItemType Directory -Force -Path $target | Out-Null

          foreach ($bf in $binFolders) {
            Write-Host "Copying from: $($bf.FullName) -> $target"
            Copy-Item -Path (Join-Path $bf.FullName '*') -Destination $target -Recurse -Force -ErrorAction SilentlyContinue
          }
        }

        # Also copy logs into the staging folder
        Copy-Item msbuild.log, msbuild.binlog, build_output.txt -Destination $staging -Force -ErrorAction SilentlyContinue

        Write-Host "Contents of staging folder:"
        Get-ChildItem -Path $staging -Recurse | Select-Object FullName, Length | ForEach-Object { Write-Host $_.FullName }

    - name: Upload single artifact (all projects + logs)
      uses: actions/upload-artifact@v4
      with:
        name: Build-All-Projects
        path: ${{ runner.temp }}/Build_All_Staging
        if-no-files-found: error
